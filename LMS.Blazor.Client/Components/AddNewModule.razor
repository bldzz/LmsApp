@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#CreateModuleModal">
    <i class="bi bi-terminal-plus"></i>
</button>
<div class="modal fade" id="CreateModuleModal" tabindex="-1" aria-labelledby="CreateModuleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="CreateModuleModalLabel">Modal title</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@NewModuleDto" OnValidSubmit="AddModuleDto">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />

                    <div class="mb-3">
                        <label for="modulename" class="form-label">Module Name:</label>
                        <InputText id="modulename" @bind-Value="NewModuleDto.ModuleName" class="form-control" />
                        <ValidationMessage For="() => NewModuleDto.ModuleName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="startdate" class="form-label">Start Date:</label>
                        <InputDate id="startdate" @bind-Value="NewModuleDto.StartDate" class="form-control" />
                        <ValidationMessage For="() => NewModuleDto.StartDate" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="enddate" class="form-label">End Date:</label>
                        <InputDate id="enddate" @bind-Value="NewModuleDto.EndDate" class="form-control" />
                        <ValidationMessage For="() => NewModuleDto.EndDate" class="text-danger" />
                    </div>

                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Create Module</button>
                </EditForm>
            </div>
            <div class="modal-footer">
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int courseId { get; set; }
    private ModuleCreationDto NewModuleDto { get; set; } = new ModuleCreationDto();
    [Inject]
    private IApiService _apiService { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private async Task AddModuleDto()
    {
        try
        {
            NewModuleDto.CourseId = courseId;
            var response = (await _apiService.PostAsync<ModuleCreationDto, ModuleCreationDto>("api/modules", NewModuleDto));
            NavigationManager.NavigateTo("/courselist", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
