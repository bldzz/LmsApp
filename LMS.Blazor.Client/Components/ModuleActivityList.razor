@using LMS.Shared.DTOs

<div class="accordion" id="@($"Activityaccordion{ModuleId}")">
    @foreach (var activity in ActivityList ?? Enumerable.Empty<ActivityDto>())
    {
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="@($"#collapseA{activity.Id}")" aria-expanded="false" aria-controls="@($"collapseA{activity.Id}")">
                    @activity.ActivityName
                </button>
            </h2>
        </div>
        <div id="@($"collapseA{activity.Id}")" class="accordion-collapse collapse">
            <div class="accordion-body">
                @if (isTeacher)
                {
                    <ul>
                        <li><a href="#">Remove @activity.ActivityName from Module</a></li>
                    </ul>
                }
                @activity.Description <br />
                Start: @activity.StartDate <br />
                End: @activity.EndDate
            </div>
        </div>
    }
</div>

@code {
    private bool isTeacher;
    [Parameter]
    public int ModuleId { get; set; }
    [Parameter]
    public List<ActivityDto> ActivityList { get; set; }
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isTeacher = authState.User.IsInRole("Teacher");
    }
}