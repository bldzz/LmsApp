@page "/coursedtos/create"
@using Microsoft.EntityFrameworkCore
@using LMS.Shared.DTOs
@inject IDbContextFactory<LMS.Blazor.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>CourseDto</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="CourseDto" OnValidSubmit="AddCourseDto" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="coursename" class="form-label">CourseName:</label> 
                <InputText id="coursename" @bind-Value="CourseDto.CourseName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => CourseDto.CourseName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="startdate" class="form-label">StartDate:</label> 
                <InputDate id="startdate" @bind-Value="CourseDto.StartDate" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => CourseDto.StartDate" class="text-danger" /> 
            </div>
            <div class="mb-3">
                <label for="moduleids" class="form-label">ModuleIds:</label>
                <InputText id="moduleids" @bind-Value="ModuleIdsInput" class="form-control" aria-required="true" />
                <ValidationMessage For="() => ModuleIdsInput" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
        </div>
</div>

<div>
    <a href="/coursedtos">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private CourseDto CourseDto { get; set; } = new();

    private string ModuleIdsInput { get; set; } = string.Empty;

    private async Task AddCourseDto()
    {
        // Convert the comma-separated input string to a List<int>
        CourseDto.ModuleIds = ModuleIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                           .Select(id => int.TryParse(id.Trim(), out var result) ? result : 0)
                                           .Where(id => id > 0) // Filter out invalid IDs
                                           .ToList();

        using var context = DbFactory.CreateDbContext();
        context.CourseDto.Add(CourseDto);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/coursedtos");
    }
}

