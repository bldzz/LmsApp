@page "/coursedtos/create"
@using LMS.Blazor.Client.Services
@using LMS.Shared.DTOs
@inject IApiService ApiService
@inject NavigationManager NavigationManager


<PageTitle>Create</PageTitle>

<h1>Create</h1>
<h2>Create a New Course</h2>
<hr />
<div class="row">
    <div class="col-md-6">
        <!-- Add the @formname attribute -->
        <EditForm method="post" Model="CourseDto" OnValidSubmit="AddCourseDto" @formname="CreateCourseForm" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            
            <div class="mb-3">
                <label for="coursename" class="form-label">Course Name:</label>
                <InputText id="coursename" @bind-Value="CourseDto.CourseName" class="form-control" />
                <ValidationMessage For="() => CourseDto.CourseName" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputTextArea id="description" @bind-Value="CourseDto.Description" class="form-control" />
                <ValidationMessage For="() => CourseDto.Description" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="startdate" class="form-label">Start Date:</label>
                <InputDate id="startdate" @bind-Value="CourseDto.StartDate" class="form-control" />
                <ValidationMessage For="() => CourseDto.StartDate" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="enddate" class="form-label">End Date:</label>
                <InputDate id="enddate" @bind-Value="CourseDto.EndDate" class="form-control" />
                <ValidationMessage For="() => CourseDto.EndDate" class="text-danger" />
            </div>
            
            <div class="mb-3">
                <label for="moduleids" class="form-label">Module IDs (comma-separated):</label>
                <InputText id="moduleids" @bind-Value="ModuleIdsInput" class="form-control" />
                <ValidationMessage For="() => ModuleIdsInput" class="text-danger" />
            </div>
            
            <button type="submit" class="btn btn-primary">Create Course</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/coursedtos">Back to List</a>
</div>

@code {
    private CourseDto CourseDto { get; set; } = new();
    private string ModuleIdsInput { get; set; } = string.Empty;

    private async Task AddCourseDto()
    {
        try
        {
            var moduleIds = ModuleIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                          .Select(id => int.TryParse(id.Trim(), out var result) ? result : 0)
                                          .Where(id => id > 0)
                                          .ToList();

            var modules = new List<ModuleDto>();
            foreach (var moduleId in moduleIds)
            {
                var module = await ApiService.CallApiAsync<ModuleDto>($"api/modules/{moduleId}");
                if (module != null)
                {
                    modules.Add(module);
                }
            }

            CourseDto.Modules = modules;

            await ApiService.CallApiAsync("api/courses", CourseDto); // Assuming POST
            NavigationManager.NavigateTo("/coursedtos");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error while creating course: {ex.Message}");
        }
    }
}
